/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace RPS {
  export type EndParamsStruct = {
    proof: BigNumberish[];
    roundId: BigNumberish;
    move1: BigNumberish;
  };

  export type EndParamsStructOutput = [BigNumber[], BigNumber, number] & {
    proof: BigNumber[];
    roundId: BigNumber;
    move1: number;
  };

  export type RoundStruct = {
    player1: string;
    player2: string;
    move1Attestation: BigNumberish;
    wager: BigNumberish;
    nonce: BigNumberish;
    maxRoundTime: BigNumberish;
    startedAt: BigNumberish;
    move2PlayedAt: BigNumberish;
    move1: BigNumberish;
    move2: BigNumberish;
    winner: BigNumberish;
    ended: boolean;
  };

  export type RoundStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    boolean
  ] & {
    player1: string;
    player2: string;
    move1Attestation: BigNumber;
    wager: BigNumber;
    nonce: number;
    maxRoundTime: BigNumber;
    startedAt: BigNumber;
    move2PlayedAt: BigNumber;
    move1: number;
    move2: number;
    winner: number;
    ended: boolean;
  };

  export type StartParamsStruct = {
    proof: BigNumberish[];
    moveAttestation: BigNumberish;
    nonce: BigNumberish;
    maxRoundTime: BigNumberish;
    permitAmount: BigNumberish;
    permitDeadline: BigNumberish;
    permitV: BigNumberish;
    permitR: BytesLike;
    permitS: BytesLike;
  };

  export type StartParamsStructOutput = [
    BigNumber[],
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string
  ] & {
    proof: BigNumber[];
    moveAttestation: BigNumber;
    nonce: number;
    maxRoundTime: BigNumber;
    permitAmount: BigNumber;
    permitDeadline: BigNumber;
    permitV: number;
    permitR: string;
    permitS: string;
  };

  export type Move2ParamsStruct = {
    roundId: BigNumberish;
    move: BigNumberish;
    permitDeadline: BigNumberish;
    permitV: BigNumberish;
    permitR: BytesLike;
    permitS: BytesLike;
  };

  export type Move2ParamsStructOutput = [
    BigNumber,
    number,
    BigNumber,
    number,
    string,
    string
  ] & {
    roundId: BigNumber;
    move: number;
    permitDeadline: BigNumber;
    permitV: number;
    permitR: string;
    permitS: string;
  };
}

export interface RPSInterface extends utils.Interface {
  functions: {
    "DEAD_MOVE()": FunctionFragment;
    "collectForfeit(uint256)": FunctionFragment;
    "endRound((uint256[8],uint256,uint8))": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRound(uint256)": FunctionFragment;
    "getRounds()": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "startRound((uint256[8],uint256,uint32,uint64,uint256,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "submitMove2((uint256,uint8,uint256,uint8,bytes32,bytes32))": FunctionFragment;
    "totalRounds()": FunctionFragment;
    "wagerToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEAD_MOVE"
      | "collectForfeit"
      | "endRound"
      | "getNonce"
      | "getRound"
      | "getRounds"
      | "getTrustedForwarder"
      | "isTrustedForwarder"
      | "rounds"
      | "startRound"
      | "submitMove2"
      | "totalRounds"
      | "wagerToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEAD_MOVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectForfeit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endRound",
    values: [RPS.EndParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getRounds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRound",
    values: [RPS.StartParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMove2",
    values: [RPS.Move2ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wagerToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DEAD_MOVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectForfeit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRounds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMove2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wagerToken", data: BytesLike): Result;

  events: {
    "Move2Played(uint256)": EventFragment;
    "RoundEnded(uint256,uint256)": EventFragment;
    "RoundStarted(uint256,uint256,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Move2Played"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundStarted"): EventFragment;
}

export interface Move2PlayedEventObject {
  roundId: BigNumber;
}
export type Move2PlayedEvent = TypedEvent<[BigNumber], Move2PlayedEventObject>;

export type Move2PlayedEventFilter = TypedEventFilter<Move2PlayedEvent>;

export interface RoundEndedEventObject {
  roundId: BigNumber;
  winner: BigNumber;
}
export type RoundEndedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RoundEndedEventObject
>;

export type RoundEndedEventFilter = TypedEventFilter<RoundEndedEvent>;

export interface RoundStartedEventObject {
  roundId: BigNumber;
  wager: BigNumber;
  maxRoundTime: BigNumber;
}
export type RoundStartedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RoundStartedEventObject
>;

export type RoundStartedEventFilter = TypedEventFilter<RoundStartedEvent>;

export interface RPS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RPSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<[number]>;

    collectForfeit(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endRound(
      params: RPS.EndParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getNonce(
      player: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getRound(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RPS.RoundStructOutput]>;

    getRounds(overrides?: CallOverrides): Promise<[RPS.RoundStructOutput[]]>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { forwarder: string }>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        boolean
      ] & {
        player1: string;
        player2: string;
        move1Attestation: BigNumber;
        wager: BigNumber;
        nonce: number;
        maxRoundTime: BigNumber;
        startedAt: BigNumber;
        move2PlayedAt: BigNumber;
        move1: number;
        move2: number;
        winner: number;
        ended: boolean;
      }
    >;

    startRound(
      params: RPS.StartParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitMove2(
      params: RPS.Move2ParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalRounds(overrides?: CallOverrides): Promise<[BigNumber]>;

    wagerToken(overrides?: CallOverrides): Promise<[string]>;
  };

  DEAD_MOVE(overrides?: CallOverrides): Promise<number>;

  collectForfeit(
    roundId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endRound(
    params: RPS.EndParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getNonce(player: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRound(
    roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RPS.RoundStructOutput>;

  getRounds(overrides?: CallOverrides): Promise<RPS.RoundStructOutput[]>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      boolean
    ] & {
      player1: string;
      player2: string;
      move1Attestation: BigNumber;
      wager: BigNumber;
      nonce: number;
      maxRoundTime: BigNumber;
      startedAt: BigNumber;
      move2PlayedAt: BigNumber;
      move1: number;
      move2: number;
      winner: number;
      ended: boolean;
    }
  >;

  startRound(
    params: RPS.StartParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitMove2(
    params: RPS.Move2ParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalRounds(overrides?: CallOverrides): Promise<BigNumber>;

  wagerToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<number>;

    collectForfeit(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endRound(
      params: RPS.EndParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getNonce(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRound(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RPS.RoundStructOutput>;

    getRounds(overrides?: CallOverrides): Promise<RPS.RoundStructOutput[]>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        boolean
      ] & {
        player1: string;
        player2: string;
        move1Attestation: BigNumber;
        wager: BigNumber;
        nonce: number;
        maxRoundTime: BigNumber;
        startedAt: BigNumber;
        move2PlayedAt: BigNumber;
        move1: number;
        move2: number;
        winner: number;
        ended: boolean;
      }
    >;

    startRound(
      params: RPS.StartParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitMove2(
      params: RPS.Move2ParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    totalRounds(overrides?: CallOverrides): Promise<BigNumber>;

    wagerToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Move2Played(uint256)"(
      roundId?: BigNumberish | null
    ): Move2PlayedEventFilter;
    Move2Played(roundId?: BigNumberish | null): Move2PlayedEventFilter;

    "RoundEnded(uint256,uint256)"(
      roundId?: BigNumberish | null,
      winner?: BigNumberish | null
    ): RoundEndedEventFilter;
    RoundEnded(
      roundId?: BigNumberish | null,
      winner?: BigNumberish | null
    ): RoundEndedEventFilter;

    "RoundStarted(uint256,uint256,uint64)"(
      roundId?: BigNumberish | null,
      wager?: null,
      maxRoundTime?: null
    ): RoundStartedEventFilter;
    RoundStarted(
      roundId?: BigNumberish | null,
      wager?: null,
      maxRoundTime?: null
    ): RoundStartedEventFilter;
  };

  estimateGas: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<BigNumber>;

    collectForfeit(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endRound(
      params: RPS.EndParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getNonce(player: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRound(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRounds(overrides?: CallOverrides): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    startRound(
      params: RPS.StartParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitMove2(
      params: RPS.Move2ParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalRounds(overrides?: CallOverrides): Promise<BigNumber>;

    wagerToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEAD_MOVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectForfeit(
      roundId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endRound(
      params: RPS.EndParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getNonce(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRound(
      roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startRound(
      params: RPS.StartParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitMove2(
      params: RPS.Move2ParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wagerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
